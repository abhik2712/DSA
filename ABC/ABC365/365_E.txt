1. Problem link: https://atcoder.jp/contests/abc365/tasks/abc365_e

2. Problem statement:  For all subarrays of length>=2 find the sum of their XOR

3. Implementation:

    a. Trick: We know how to find sum of XOR of all subarrays. Subtract length 1 subarray sum 

    b. How to find sum of XOR of all subarrays ? 

        i.  Build a prefix XOR where prefix[0] = 0 and prefix[i] = XOR of arr[1...i]

        ii. Now the problem reduces to finding the prefixXor for every range pair i.e. Suppose we have three elements 
        index: [1,2,3], then to generate every subarry we have (1,1), (1,2) and (1,3), (2,2), (2,3) these pair ranges' preXOR and sum them

        iii. For this we use Contribution technique in bit manipulation : How much does the ith bit contribute in the final result

        iv. Since number are <10^8 => <2^30 so we look for 30 bits

        Example:
            0 -> 0 0 0 ->[0]        ->  0 0 0(z)
            1 -> 0 0 1 ->[0^1]      ->  0 0 1(a)
            2 -> 0 1 0 ->[0^1^2]    ->  0 1 1(b)
            3 -> 0 1 1 ->[0^1^2^3]  ->  0 0 0(c)
            4 -> 1 0 0 ->[0^1^2^3^4]->  1 0 0(d)

            for ith bit to contribute in final sum of subarray we count the number of ones and zeros in ith bit

            Example : 1(a)^0(c) : Gives me sum of subaaray[2..3], 
                      1(a)^0(d) : Gives me sum of subaaray[2..4], 
                      1(b)^0(c) : Gives me sum of subaaray[3], 
                      1(b)^0(d) : Gives me sum of subaaray[3..4]
                      ...Similarily we can go on for every pair and only the (0,1)pairs in ith bit will contribute to my final answer, that's why I need preXor[0]=0 for [1..*] subarray

        v. Count the number of ones and zeros in ith bit 

        vi. for ith bit: ans += (cnt_one * cnt_zero)*(1<<i)

    c. Subtract the sum of individual elements since we need subarray with len >= 2
