// LC 97

2. Problem: https://leetcode.com/problems/interleaving-string/

Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where s and t are divided into n and m 
substrings
 respectively, such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.



3. Main idea

dp(level1,level2,level3) -> 
    if(level1<n && s1[level1]==s3[level3]) dp[l1][l2][l3] |= dp[l1+1][l2][l3+1]
    if(level2<m && s2[level2]==s3[level3]) dp[l1][l2][l3] |= dp[l1][l2+1][l3+1]



3. Implementation

4. Optimal Code

Optimisation: 
    
    State space reduction : level3 is a function of level1 & level2 : 
        
        level3 = level1 + level2
    
    dp(level1,level2) -> 
        if(level1<n && s1[level1]==s3[level2+level1]) dp[l1][l2] |= dp[l1+1][l2]
        if(level2<m && s2[level2]==s3[level2+level1]) dp[l1][l2] |= dp[l1][l2+1]