// LC 4

2. Problem: https://leetcode.com/problems/median-of-two-sorted-arrays/description/?envType=study-plan-v2&envId=top-interview-150

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

3. Main idea

    1. Median is the middle element of a sorted array of length L

    2. Given two arrays we need to symmetrically divide the arrays in two halves of equal length

    3. Suppose arr1 length = 5 and arr2 length = 7, so to divide into arrays of equal length we can have possible pairs like : ((1..l1,1..l2) , (r1..n,r2..m)) ((5,0), (0,7)), ((4,1),(1,6)) => 4 elements of arr1 and 1 element of arr2 in first half and remaining on second

    4. suppose the first half consists of : arr1[1,2,..l1], arr2[1,2,..l2] => sort the elements
    5. suppose the second half consists of: arr1[l1+1...n], arr2[l2+1...m] => sort the elements

    6. Condition for the two halves when merged to give a final sorted array : 
        arr1[l1]<=arr2[r2] and arr2[l2] <= arr1[r1]

    7. For example:
        arr1 : [1,5,7,8,9]
        arr2 : [2,3,4,5,6,7,8]
        Total length = 12
        left = 6 right = 6

        Suppose we take 4 elements from arr1 and 2 elements from arr2 for first half => [1,5,7,8,2,3] 
            Here arr1[l1] = 8, arr2[l2] = 3
            
        So we have 1 element from arr1 and 5 elements from arr2 for second half => [9,4,5,6,7,8]
            Here arr1[r1] = 9, arr2[r2] = 4
        
        And our final array becomes : [(1,2,3,5,7,8)(4,5,6,7,8,9)] => which is Not a sorted array 

        As we can see arr1[l1] > arr2[r2] so this is invalid Condition => This means at least arr1[l1] or 8 should be towards second half and we need to verify further

        So the pattern is like for lengths of arr1 : (1,2,3,4,5) when we choose length say = 4, means 4 elements of arr1 in first half and remaining from arr2 we get an invalid / non sorted final array 

        So if  arr1[l1] > arr2[r2] : (8 > 4) => Means we have to reduce the number of elements taken from arr1
        and if arr2[l2] > arr1[r1]  => Means we have to reduce the number of elements taken from arr2 => increase the number of elements taken from arr1

        The main motto in every step is we need to ensure any element in first half should always be less than any element in second half

        So this is unique BS problem

        For above example: 
        Lengths of arr1(smaller array)   1   [2]   3   4   5
        Validity of length :             NV   V    NV  NV  NV

        So if arr2[l2] > arr1[r1] => we move towards right (take more elements from arr1) in the above lengths of arr1
        else if arr1[l1] > arr2[r2] => we move towards left (take lesser elements from arr1) in the above lengths of arr1

        Handle the case of odd length = length of first half of array = (n+m+1)/2;

4. Implementation

5. Optimal Code

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();
        if(n>m) return findMedianSortedArrays(nums2,nums1);
        int left = (n+m+1)/2;
        int lo = 0, hi = n;
        double ans = 0.0;
        while(lo<=hi){
            int mid1 = lo + (hi-lo)/2;
            int mid2 = left - mid1;
            int l1 = INT_MIN, l2 = INT_MIN;
            int r1 = INT_MAX, r2 = INT_MAX;
            if(mid1<n)r1 = nums1[mid1];
            if(mid2<m)r2 = nums2[mid2];
            if(mid1-1>=0)l1 = nums1[mid1-1];
            if(mid2-1>=0)l2 = nums2[mid2-1];
            if(l1<=r2 && l2<=r1){
                if((n+m)%2){
                    ans = (double)max(l1,l2);
                }
                else
                    ans = (double)((max(l1,l2) + min(r1,r2)) / 2.0);
                return ans;
            }
            else if(l1>r2)
                hi = mid1-1;
            else if(l2>r1)
                lo = mid1+1;
        }
        return 0;
}