1. LC Problem WC 410

2. Problem: https://leetcode.com/problems/find-the-count-of-monotonic-pairs-ii/description/

You are given an array of positive integers nums of length n.

We call a pair of non-negative integer arrays (arr1, arr2) monotonic if:

The lengths of both arrays are n.
arr1 is monotonically non-decreasing, in other words, arr1[0] <= arr1[1] <= ... <= arr1[n - 1].
arr2 is monotonically non-increasing, in other words, arr2[0] >= arr2[1] >= ... >= arr2[n - 1].
arr1[i] + arr2[i] == nums[i] for all 0 <= i <= n - 1.
Return the count of monotonic pairs.

Since the answer may be very large, return it modulo 109 + 7.



3. Main idea

    1. DP with optimisation
    2. State space reduction
    3. dp(level, preva) -> Here preva belongs to a range thus we can use prefix sum optimisation too

4. Implementation

int countOfPairs(vector<int>& nums) {
        n = nums.size();
        vector<vector<ll>>dp(2,vector<ll>(1001));
        for(int level=n-1;level>=0;level--){
            for(int prev1 = 0;prev1<=1000;prev1++){
                if(prev1>nums[level]){
                    dp[level&1][prev1]=0;
                    continue;
                }
                if(level==n-1)
                    dp[level&1][prev1]=1;
                else{
                    int nextj = max(prev1,nums[level+1]-nums[level]+prev1);
                    dp[level&1][prev1] = (dp[(level+1)&1][1000] - (nextj>0?dp[(level+1)&1][nextj-1]:0));
                    (dp[level&1][prev1]+=mod)%=mod;
                }
            }
            for(int j=0;j<=1000;j++){
                dp[level&1][j] += (j>0?dp[level&1][j-1]:0);
                dp[level&1][j]%=mod;
            }
        }
        return dp[0][1000];
    }

5. Optimal Code